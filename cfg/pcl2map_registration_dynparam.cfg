#!/usr/bin/env python

PACKAGE='mrs_pcl_tools'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator();

registration_method = gen.enum([gen.const("FPFH", int_t, 0, "Fast Point Feature Histogram"),
                                gen.const("NDT", int_t, 1, "Normal Distribution Transform")],
                                "Registration method")

reg = gen.add_group("Registration parameters");
reg.add("reg_method", int_t, 0, "Registration method", 0, 0, 1, edit_method=registration_method);
reg.add("reg_period", double_t, 0, "Registration period", 2.0, 0.1, 10.0);
reg.add("use_init_guess", bool_t, 0, "Use init guess? [true/false]", False)
reg.add("init_guess_yaw", double_t, 0, "Heading of initial guess of registration", 0.0, -3.1416, 3.1416);
reg.add("norm_estim_rad", double_t, 0, "Normals estimation radius", 0.02, 0.0, 100.0);

fpfh = gen.add_group("FPFH registration parameters");
fpfh.add("fpfh_voxel_leaf", double_t, 0, "Voxel leaf size", 0.2, 0.0, 10000.0);
fpfh.add("fpfh_search_rad", double_t, 0, "Features search radius", 0.4, 0.0, 10000.0);
fpfh.add("fpfh_similarity_threshold", double_t, 0, "Polygonal edge length similarity threshold", 0.9, 0.0, 10000.0);
fpfh.add("fpfh_inlier_fraction", double_t, 0, "Required inlier fraction for accepting a pose hypothesis", 0.25, 0.0, 10000.0);
fpfh.add("fpfh_ransac_max_iter", int_t, 0, "Number of RANSAC iterations", 500, 0, 2147483646);
fpfh.add("fpfh_number_of_samples", int_t, 0, "Number of points to sample for generating/prerejecting a pose", 3, 0, 2147483646);
fpfh.add("fpfh_corr_randomness", int_t, 0, "Number of nearest features to use", 5, 0, 2147483646);

ndt = gen.add_group("NDT registration parameters");
ndt.add("ndt_transformation_epsilon", double_t, 0, "NDT transformation epsilon", 0.01, 0, 100000000);
ndt.add("ndt_step_size", double_t, 0, "NDT step size", 0.5, 0, 100000000);
ndt.add("ndt_resolution", double_t, 0, "NDT resolution", 1.0, 0, 100000000);
ndt.add("ndt_maximum_iterations", int_t, 0, "NDT maximum iterations", 100, 0, 100000000);

exit(gen.generate(PACKAGE, "pcl2map_registration", "pcl2map_registration_dynparam"))


